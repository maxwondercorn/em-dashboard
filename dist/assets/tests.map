{"version":3,"sources":["em-dashboard/tests/app.jshint.js","em-dashboard/tests/components/side-nav.jshint.js","em-dashboard/tests/components/top-bar.jshint.js","em-dashboard/tests/controllers/application.jshint.js","em-dashboard/tests/controllers/employees.jshint.js","em-dashboard/tests/controllers/issues.jshint.js","em-dashboard/tests/helpers/check-ifclosed.jshint.js","em-dashboard/tests/helpers/destroy-app.js","em-dashboard/tests/helpers/destroy-app.jshint.js","em-dashboard/tests/helpers/limit-characters.jshint.js","em-dashboard/tests/helpers/module-for-acceptance.js","em-dashboard/tests/helpers/module-for-acceptance.jshint.js","em-dashboard/tests/helpers/resolver.js","em-dashboard/tests/helpers/resolver.jshint.js","em-dashboard/tests/helpers/start-app.js","em-dashboard/tests/helpers/start-app.jshint.js","em-dashboard/tests/integration/components/side-nav-test.js","em-dashboard/tests/integration/components/side-nav-test.jshint.js","em-dashboard/tests/integration/components/top-bar-test.js","em-dashboard/tests/integration/components/top-bar-test.jshint.js","em-dashboard/tests/resolver.jshint.js","em-dashboard/tests/router.jshint.js","em-dashboard/tests/routes/application.jshint.js","em-dashboard/tests/routes/employees.jshint.js","em-dashboard/tests/routes/index.jshint.js","em-dashboard/tests/routes/issue-graph.jshint.js","em-dashboard/tests/routes/issues.jshint.js","em-dashboard/tests/test-helper.js","em-dashboard/tests/test-helper.jshint.js","em-dashboard/tests/unit/controllers/employees-test.js","em-dashboard/tests/unit/controllers/employees-test.jshint.js","em-dashboard/tests/unit/controllers/issues-test.js","em-dashboard/tests/unit/controllers/issues-test.jshint.js","em-dashboard/tests/unit/helpers/check-ifclosed-test.js","em-dashboard/tests/unit/helpers/check-ifclosed-test.jshint.js","em-dashboard/tests/unit/helpers/limit-characters-test.js","em-dashboard/tests/unit/helpers/limit-characters-test.jshint.js","em-dashboard/tests/unit/routes/application-test.js","em-dashboard/tests/unit/routes/application-test.jshint.js","em-dashboard/tests/unit/routes/employees-test.js","em-dashboard/tests/unit/routes/employees-test.jshint.js","em-dashboard/tests/unit/routes/index-test.js","em-dashboard/tests/unit/routes/index-test.jshint.js","em-dashboard/tests/unit/routes/issue-graph-test.js","em-dashboard/tests/unit/routes/issue-graph-test.jshint.js","em-dashboard/tests/unit/routes/issues-test.js","em-dashboard/tests/unit/routes/issues-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('em-dashboard/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/components/side-nav.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/side-nav.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/side-nav.js should pass jshint.\\ncomponents/side-nav.js: line 7, col 9, \\'e\\' is defined but never used.\\ncomponents/side-nav.js: line 8, col 9, \\'$\\' is not defined.\\ncomponents/side-nav.js: line 9, col 7, \\'$\\' is not defined.\\n\\n3 errors');\n  });\n});","define('em-dashboard/tests/components/top-bar.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/top-bar.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/top-bar.js should pass jshint.\\ncomponents/top-bar.js: line 9, col 11, \\'$\\' is not defined.\\ncomponents/top-bar.js: line 10, col 9, \\'$\\' is not defined.\\ncomponents/top-bar.js: line 12, col 9, \\'$\\' is not defined.\\ncomponents/top-bar.js: line 15, col 11, \\'$\\' is not defined.\\ncomponents/top-bar.js: line 16, col 9, \\'$\\' is not defined.\\n\\n5 errors');\n  });\n});","define('em-dashboard/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 6, col 27, Missing semicolon.\\n\\n1 error');\n  });\n});","define('em-dashboard/tests/controllers/employees.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/employees.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/employees.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/controllers/issues.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/issues.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/issues.js should pass jshint.\\ncontrollers/issues.js: line 15, col 9, \\'$\\' is not defined.\\ncontrollers/issues.js: line 19, col 9, \\'$\\' is not defined.\\ncontrollers/issues.js: line 23, col 7, \\'$\\' is not defined.\\ncontrollers/issues.js: line 26, col 14, \\'$\\' is not defined.\\ncontrollers/issues.js: line 26, col 61, \\'$\\' is not defined.\\ncontrollers/issues.js: line 27, col 11, \\'$\\' is not defined.\\ncontrollers/issues.js: line 32, col 13, \\'$\\' is not defined.\\ncontrollers/issues.js: line 33, col 9, \\'$\\' is not defined.\\n\\n8 errors');\n  });\n});","define('em-dashboard/tests/helpers/check-ifclosed.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/check-ifclosed.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/check-ifclosed.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('em-dashboard/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/helpers/limit-characters.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/limit-characters.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/limit-characters.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'em-dashboard/tests/helpers/start-app', 'em-dashboard/tests/helpers/destroy-app'], function (exports, _qunit, _emDashboardTestsHelpersStartApp, _emDashboardTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _emDashboardTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _emDashboardTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('em-dashboard/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/helpers/resolver', ['exports', 'em-dashboard/resolver', 'em-dashboard/config/environment'], function (exports, _emDashboardResolver, _emDashboardConfigEnvironment) {\n\n  var resolver = _emDashboardResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _emDashboardConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _emDashboardConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('em-dashboard/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/helpers/start-app', ['exports', 'ember', 'em-dashboard/app', 'em-dashboard/config/environment'], function (exports, _ember, _emDashboardApp, _emDashboardConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _emDashboardConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _emDashboardApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('em-dashboard/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/integration/components/side-nav-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('side-nav', 'Integration | Component | side nav', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 12\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'side-nav', ['loc', [null, [1, 0], [1, 12]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'side-nav', [], [], 0, null, ['loc', [null, [2, 4], [4, 17]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('em-dashboard/tests/integration/components/side-nav-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/side-nav-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/side-nav-test.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/integration/components/top-bar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('top-bar', 'Integration | Component | top bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 11\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'top-bar', ['loc', [null, [1, 0], [1, 11]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.5.1',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.5.1',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'top-bar', [], [], 0, null, ['loc', [null, [2, 4], [4, 16]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('em-dashboard/tests/integration/components/top-bar-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/top-bar-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/top-bar-test.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass jshint.\\nroutes/application.js: line 5, col 5, \\'google\\' is not defined.\\n\\n1 error');\n  });\n});","define('em-dashboard/tests/routes/employees.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/employees.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/employees.js should pass jshint.\\nroutes/employees.js: line 46, col 51, Expected an assignment or function call and instead saw an expression.\\nroutes/employees.js: line 47, col 59, Expected an assignment or function call and instead saw an expression.\\nroutes/employees.js: line 48, col 53, Expected an assignment or function call and instead saw an expression.\\nroutes/employees.js: line 49, col 53, Expected an assignment or function call and instead saw an expression.\\nroutes/employees.js: line 6, col 12, \\'$\\' is not defined.\\nroutes/employees.js: line 53, col 3, \\'google\\' is not defined.\\nroutes/employees.js: line 54, col 3, \\'google\\' is not defined.\\nroutes/employees.js: line 59, col 16, \\'google\\' is not defined.\\nroutes/employees.js: line 71, col 22, \\'google\\' is not defined.\\nroutes/employees.js: line 77, col 16, \\'google\\' is not defined.\\nroutes/employees.js: line 91, col 21, \\'google\\' is not defined.\\n\\n11 errors');\n  });\n});","define('em-dashboard/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/routes/issue-graph.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/issue-graph.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/issue-graph.js should pass jshint.\\nroutes/issue-graph.js: line 34, col 37, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 35, col 37, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 36, col 37, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 37, col 37, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 38, col 37, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 39, col 37, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 40, col 37, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 41, col 37, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 42, col 37, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 43, col 38, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 44, col 39, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 45, col 39, Expected an assignment or function call and instead saw an expression.\\nroutes/issue-graph.js: line 52, col 7, \\'customerNumbers\\' is defined but never used.\\nroutes/issue-graph.js: line 106, col 15, Missing semicolon.\\nroutes/issue-graph.js: line 6, col 12, \\'Em\\' is not defined.\\nroutes/issue-graph.js: line 7, col 18, \\'$\\' is not defined.\\nroutes/issue-graph.js: line 17, col 15, \\'$\\' is not defined.\\nroutes/issue-graph.js: line 66, col 3, \\'google\\' is not defined.\\nroutes/issue-graph.js: line 69, col 16, \\'google\\' is not defined.\\nroutes/issue-graph.js: line 91, col 21, \\'google\\' is not defined.\\nroutes/issue-graph.js: line 110, col 3, \\'google\\' is not defined.\\nroutes/issue-graph.js: line 113, col 16, \\'google\\' is not defined.\\nroutes/issue-graph.js: line 119, col 20, \\'google\\' is not defined.\\nroutes/issue-graph.js: line 125, col 21, \\'google\\' is not defined.\\n\\n24 errors');\n  });\n});","define('em-dashboard/tests/routes/issues.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/issues.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/issues.js should pass jshint.\\nroutes/issues.js: line 5, col 12, \\'$\\' is not defined.\\n\\n1 error');\n  });\n});","define('em-dashboard/tests/test-helper', ['exports', 'em-dashboard/tests/helpers/resolver', 'ember-qunit'], function (exports, _emDashboardTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_emDashboardTestsHelpersResolver['default']);\n});","define('em-dashboard/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/unit/controllers/employees-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:employees', 'Unit | Controller | employees', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('em-dashboard/tests/unit/controllers/employees-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/employees-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/employees-test.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/unit/controllers/issues-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:issues', 'Unit | Controller | issues', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('em-dashboard/tests/unit/controllers/issues-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/issues-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/issues-test.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/unit/helpers/check-ifclosed-test', ['exports', 'em-dashboard/helpers/check-ifclosed', 'qunit'], function (exports, _emDashboardHelpersCheckIfclosed, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | check ifclosed');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _emDashboardHelpersCheckIfclosed.checkIfclosed)([42]);\n    assert.ok(result);\n  });\n});","define('em-dashboard/tests/unit/helpers/check-ifclosed-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/check-ifclosed-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/check-ifclosed-test.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/unit/helpers/limit-characters-test', ['exports', 'em-dashboard/helpers/limit-characters', 'qunit'], function (exports, _emDashboardHelpersLimitCharacters, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | limit characters');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _emDashboardHelpersLimitCharacters.limitCharacters)([42]);\n    assert.ok(result);\n  });\n});","define('em-dashboard/tests/unit/helpers/limit-characters-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/helpers/limit-characters-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/limit-characters-test.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('em-dashboard/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/unit/routes/employees-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:employees', 'Unit | Route | employees', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('em-dashboard/tests/unit/routes/employees-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/employees-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/employees-test.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/unit/routes/index-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('em-dashboard/tests/unit/routes/index-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/index-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/unit/routes/issue-graph-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:issue-graph', 'Unit | Route | issue graph', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('em-dashboard/tests/unit/routes/issue-graph-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/issue-graph-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/issue-graph-test.js should pass jshint.');\n  });\n});","define('em-dashboard/tests/unit/routes/issues-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:issues', 'Unit | Route | issues', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('em-dashboard/tests/unit/routes/issues-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/issues-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/issues-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('em-dashboard/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}